type CycleManagement = record {
  refueling_amount : nat;
  initial_supply : nat;
  refueling_threshold : nat;
};
type CycleManagements = record {
  db : CycleManagement;
  vault_intial_supply : nat;
  refueling_interval : nat64;
  proxy : CycleManagement;
  indexer : CycleManagement;
};
type Env = variant { Production; Test; LocalDevelopment };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type HttpsSnapshotIndexerSourceAttrs = record {
  queries : vec record { text; text };
};
type InitError = variant {
  InvalidDestination : text;
  InvalidPrincipal : principal;
  InvalidContent : text;
  InvalidRequest : text;
};
type PoolSummaryLevel1 = record {
  t0 : text;
  t1 : text;
  fee : int64;
  t0_high : float64;
  t0_name : text;
  tvl_usd_change : float64;
  t0_volume_change_7d : float64;
  t1_high_usd : float64;
  t0_price_usd : int64;
  t0_volume : float64;
  t1_volume_change_7d : float64;
  last_amount : float64;
  t1_tvl_usd : float64;
  t1_volume_7d : float64;
  t1_change_usd : float64;
  t1_volume_usd : float64;
  t0_low : float64;
  t0_tvl : float64;
  t0_high_usd : float64;
  t1_volume : float64;
  last_price : float64;
  t0_tvl_usd : float64;
  last_updated : int64;
  t1_high : float64;
  t1_name : text;
  t1_low_usd : float64;
  tvl_usd : float64;
  t1_volume_change : float64;
  t0_change : float64;
  default_flipped_granularities : vec int64;
  t0_price : float64;
  t1_fees_usd : float64;
  total_fees_usd : float64;
  t1_decimals : int64;
  t0_low_usd : float64;
  address : text;
  t1_price_usd : float64;
  t1_price : float64;
  cleaned : bool;
  t0_symbol : text;
  t1_change : float64;
  tx_count : int64;
  t0_volume_7d : float64;
  block : int64;
  total_volume_7d_usd : float64;
  last_side : text;
  t0_fees_usd : float64;
  t0_decimals : int64;
  t1_low : float64;
  t1_tvl : float64;
  default_granularities : vec int64;
  t0_volume_change : float64;
  t1_symbol : text;
  t0_change_usd : int64;
  is_preferred_token_order : bool;
  t0_volume_usd : float64;
};
type Result = variant { Ok; Err : InitError };
type Snapshot = record { value : SnapshotValue; timestamp : nat64 };
type SnapshotValue = record {
  id : text;
  result : vec _ResultX;
  jsonrpc : text;
};
type SourceType = variant { evm; https; chainsight };
type Sources = record {
  source : text;
  interval_sec : opt nat32;
  attributes : HttpsSnapshotIndexerSourceAttrs;
  source_type : SourceType;
};
type TransformArgs = record { context : vec nat8; response : HttpResponse };
type _ResultX = record {
  pool_summary_level_1 : PoolSummaryLevel1;
  fees_24h_usd : float32;
  volume_24h_usd : float32;
};
service : {
  get_last_snapshot : () -> (Snapshot) query;
  get_last_snapshot_value : () -> (SnapshotValue) query;
  get_proxy : () -> (principal);
  get_snapshot : (nat64) -> (Snapshot) query;
  get_snapshot_value : (nat64) -> (SnapshotValue) query;
  get_snapshots : () -> (vec Snapshot) query;
  get_sources : () -> (vec Sources) query;
  get_top_snapshot_values : (nat64) -> (vec SnapshotValue) query;
  get_top_snapshots : (nat64) -> (vec Snapshot) query;
  index : () -> ();
  init_in : (Env, CycleManagements) -> (Result);
  proxy_get_last_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_last_snapshot_value : (vec nat8) -> (vec nat8);
  proxy_get_snapshot : (vec nat8) -> (vec nat8);
  proxy_get_snapshot_value : (vec nat8) -> (vec nat8);
  proxy_get_snapshots : (vec nat8) -> (vec nat8);
  proxy_get_top_snapshot_values : (vec nat8) -> (vec nat8);
  proxy_get_top_snapshots : (vec nat8) -> (vec nat8);
  proxy_snapshots_len : (vec nat8) -> (vec nat8);
  set_task : (nat32, nat32) -> ();
  snapshots_len : () -> (nat64) query;
  transform_https_response : (TransformArgs) -> (HttpResponse) query;
}